<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace必须是唯一的，且必須包含本xml的文件名：建议用本文件所在的包路径全类名 -->
<mapper namespace="com.teligen.platform.mine.conf.mapper.basis.MapperUser">
	<!-- select：表示这是一个查询操作 -->
	<!-- id：用来配合namespace来定位这个操作，也就是在调用时，将采用cn.kolbe.mybatis.StudentMapper.getStudent -->
	<!-- resultType：表示返回值类型，必须是全类名，MyBatis将自动为我们将查询结果封装成Student对象 -->
	<!-- parameterType：表示传进来的参数的类型，因为传的是id主键，所以是int型 -->
	<!--<select id="query" parameterType="String" resultType="com.teligen.platform.mine.project.business.useconfig.vo.VoUser">-->
	<select id="select" parameterType="int" resultType="com.teligen.platform.mine.project.basis.vo.VoUser">
		<!-- #{id}：表示占位符，也就是调用时必须为其传一个id参数进来，注意是#不是$ -->
		select * from tb_gzt_user where userid = #{userId}
	</select>

	<select id="query" resultType="com.teligen.platform.mine.project.basis.vo.VoUser">
		select * from tb_gzt_user
	</select>

	<insert id="insert" parameterType="com.teligen.platform.mine.project.basis.vo.VoUser">
		<!-- myBatis插入空值时,需要指定jdbcType -->
  		insert into tb_gzt_user (userid, username, password, memo) values (#{userId}, #{userName}, #{password}, #{memo})
	</insert>

	<update id="update" parameterType="com.teligen.platform.mine.project.basis.vo.VoUser">
		update tb_gzt_user set userName=#{userName}, password=#{password}, memo=#{memo} where userId=#{userId}
	</update>

	<delete id="delete" parameterType="int">
		delete from tb_gzt_user where userId=#{userId}
	</delete>
</mapper>